{"version":3,"sources":["components/Filter/Filter.module.scss","components/Container/Container.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Container/Container.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss"],"names":["module","exports","addNewContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getContactsToShow","normalizedFilter","toLowerCase","includes","ContactForm","useState","contactName","setContactName","contactNumber","setContactNumber","useSelector","dispatch","useDispatch","reset","className","styles","onSubmit","event","preventDefault","checkSameName","find","checkSameNumber","alert","contactsActions","formLabel","formText","formInput","type","placeholder","value","onChange","currentTarget","autoComplete","pattern","title","required","defaultCountry","international","formBtn","ContactItem","contact","phoneNumber","href","contactBtn","onClick","ContactList","length","notification","map","Filter","filterLabel","filterText","filterInput","e","Container","children","App","titleContacts","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3c83b949.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__Gk3Sd\",\"filterText\":\"Filter_filterText__1bhQq\",\"filterInput\":\"Filter_filterInput__F4fvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1yed9\"};","import shortid from \"shortid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const addNewContact = createAction(\n  \"contacts/addContact\",\n  (name, number) => ({\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n    },\n  })\n);\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n","export const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getContactsToShow = (state) => {\n  const items = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport PhoneInput from 'react-phone-number-input';\r\n\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport styles from './ContactForm.module.scss';\r\nimport 'react-phone-number-input/style.css';\r\n\r\nconst ContactForm = () => {\r\n  const [contactName, setContactName] = useState('');\r\n  const [contactNumber, setContactNumber] = useState('');\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    if (name === 'name') {\r\n      setContactName(value);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const checkSameName = contacts.find(({ name }) => name === contactName);\r\n\r\n    const checkSameNumber = contacts.find(\r\n      ({ number }) => number === contactNumber,\r\n    );\r\n\r\n    if (checkSameNumber) {\r\n      const { name, number } = checkSameNumber;\r\n      alert(`This number already exists: \"${name}: ${number}\"`);\r\n      return;\r\n    }\r\n\r\n    if (checkSameName) {\r\n      alert(`${contactName} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsActions.addNewContact(contactName, contactNumber));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setContactName('');\r\n    setContactNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={styles.ContactForm} onSubmit={handleFormSubmit}>\r\n      <label className={styles.formLabel}>\r\n        <span className={styles.formText}>Name</span>\r\n        <input\r\n          className={styles.formInput}\r\n          type=\"text\"\r\n          placeholder=\"Enter contact's name\"\r\n          name=\"name\"\r\n          value={contactName}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={styles.formLabel}>\r\n        <span className={styles.formText}>Number</span>\r\n        <PhoneInput\r\n          value={contactNumber}\r\n          onChange={setContactNumber}\r\n          defaultCountry=\"UA\"\r\n          international\r\n          autoComplete=\"off\"\r\n          pattern=\"((\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?)\"\r\n          title=\"Номер телефона должен состоять из 10-14 цифр, может содержать цифры и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={styles.formBtn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;","import PropTypes from \"prop-types\";\r\nimport { useDispatch } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport styles from \"./ContactList.module.scss\";\r\n\r\nconst ContactItem = ({ contact }) => {\r\n  const { id, name, number } = contact;\r\n\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = () => dispatch(contactsActions.deleteContact(id));\r\n\r\n  return (\r\n    <li className={styles.ContactItem}>\r\n      <span>\r\n        {name}:\r\n        <a\r\n          className={styles.phoneNumber}\r\n          href={\"tel:\" + number}\r\n          aria-label=\"Call\"\r\n        >\r\n          {number}\r\n        </a>\r\n      </span>\r\n      <button className={styles.contactBtn} onClick={onDeleteContact}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactItem;","import { useSelector } from 'react-redux';\r\nimport { getContactsToShow } from '../../redux/contacts/contacts-selectors';\r\nimport ContactItem from \"./ContactItem\";\r\nimport styles from \"./ContactList.module.scss\";\r\n\r\nconst ContactList = () => {\r\n\r\n  const contacts = useSelector(getContactsToShow);\r\n\r\n  return contacts.length === 0 ? (\r\n    <p className={styles.notification}>Contact book is empty</p>\r\n  ) : (\r\n    <ul className={styles.ContactList}>\r\n      {contacts.map((contact) => {\r\n        const { id } = contact;\r\n\r\n        return (\r\n          <ContactItem\r\n            key={id}\r\n            contact={contact}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\nimport styles from \"./Filter.module.scss\";\r\n\r\nconst Filter = () => {\r\n\r\n  const filter = useSelector(getFilter);\r\n\r\n  const dispatch = useDispatch();\r\n  const onChangeFilter = e =>\r\n    dispatch(contactsActions.changeFilter(e.currentTarget.value));\r\n  \r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      <span className={styles.filterText}>Find contacts by name</span>\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        placeholder=\"Enter contact's name\"\r\n        value={filter}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;","import styles from \"./Container.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;","import styles from \"./App.scss\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport Container from \"./components/Container/Container\";\n\nconst App = () => (\n  <div className={styles.App}>\n    <Container>\n      <h1 className={styles.title}>Phonebook (hook)</h1>\n      <ContactForm />\n\n      <h2 className={styles.titleContacts}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  </div>\n);\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as contactsActions from \"./contacts-actions\";\n\nconst itemsReducer = createReducer([], {\n  [contactsActions.addNewContact]: (state, { payload }) => [payload, ...state],\n\n  [contactsActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\nimport logger from \"redux-logger\";\n\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  persistStore,\n  persistReducer,\n} from \"redux-persist\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__PVezi\",\"formInput\":\"ContactForm_formInput__2N1tc\",\"formBtn\":\"ContactForm_formBtn__3RIhc\",\"formLabel\":\"ContactForm_formLabel__2_0Rq\",\"formText\":\"ContactForm_formText__394pU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3AHxY\",\"ContactItem\":\"ContactList_ContactItem__20l8P\",\"contactBtn\":\"ContactList_contactBtn__1VU2p\",\"phoneNumber\":\"ContactList_phoneNumber__kBnGP\",\"notification\":\"ContactList_notification__2OlRd\"};"],"sourceRoot":""}